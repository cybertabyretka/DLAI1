import torch


# 1.1 Создание тензоров
print(f'{"-"*70}\n1.1 Создание тензоров\n{"-"*70}')

# Тензор размером 3x4, заполненный случайными числами от 0 до 1
tensor1 = torch.rand(3, 4)
print(f'1. Тензор размером 3x4, заполненный случайными числами от 0 до 1:\n{tensor1}')

# Тензор размером 2x3x4, заполненный нулями
tensor2 = torch.zeros(2, 3, 4)
print(f'2. Тензор размером 2x3x4, заполненный нулями:\n{tensor2}')

# Тензор размером 5x5, заполненный единицами
tensor3 = torch.ones(5, 5)
print(f'3. Тензор размером 5x5, заполненный единицами:\n{tensor3}')

# Тензор размером 4x4 с числами от 0 до 15
tensor4 = torch.arange(16).reshape(4, 4)
print(f'4. Тензор размером 4x4 с числами от 0 до 15 (с использованием reshape):\n{tensor4}')
print()


# 1.2 Операции с тензорами
print(f'{"-"*70}\n1.2 Операции с тензорами\n{"-"*70}')
a = torch.rand(3, 4)
b = torch.rand(4, 3)
print(f'Стартовые тензоры:\nA:\n{a}\nB:\n{b}')

# Транспонирование тензора A
a_t = a.T
print(f'1. Транспонированная матрица A:\n{a_t}')

# Матричное умножение A и B
a_b_mult = a @ b
print(f'2. Результат матричного умножения A и B:\n{a_b_mult}')

# Поэлементное умножение A и транспонированного B
a_b_mult_element_wise = a * b.T
print(f'3. Результат поэлементного перемножения матриц A и транспонированной B:\n{a_b_mult_element_wise}')

# Cумма всех элементов тензора A
a_sum = torch.sum(a)
print(f'4. Сумма всех элементов тензора A:\n{a_sum}')


# 1.3 Индексация и срезы
print(f'{"-"*70}\n1.3 Индексация и срезы\n{"-"*70}')
tensor = torch.arange(125).reshape(5, 5, 5)
print(f'Стартовый тензор 5х5х5:\n{tensor}')

# Первые строки для всех слоёв
first_row = tensor[:, 0, :]
print(f'1. Первые строки для всех слоёв:\n{first_row}')

# Последние столбцы
last_column = tensor[:, :, -1]
print(f'2. Последние столбцы:\n{last_column}')

# Центральная матрица 2х2 из центрального слоя
center = tensor[2, 2:4, 2:4]
print(f'3. Центральная матрица 2х2 из центрального слоя:\n{center}')

# Элементы с чётными индексами во всех измерениях
even_indices_elements = tensor[::2, ::2, ::2]
print(f'4. Элементы с чётными индексами во всех измерениях:\n{even_indices_elements}')


# 1.4 Работа с формами
print(f'{"-"*70}\n1.4 Работа с формами\n{"-"*70}')
tensor_1 = torch.arange(24)
print(f'Начальный тензор:\n{tensor_1}')

# Тензор размерностью 2x12
tensor_2_12 = tensor_1.view(2, 12)
print(f'1. Тензор размерностью 2x12:\n{tensor_2_12}')

# Тензор размерностью 3x8
tensor_3_8 = tensor_1.view(3, 8)
print(f'2. Тензор размерностью 3x8:\n{tensor_3_8}')

# Тензор размерностью 4x6
tensor_4_6 = tensor_1.view(4, 6)
print(f'3. Тензор размерностью 4x6:\n{tensor_4_6}')

# Тензор размерностью 2x3x4
tensor_2_3_4 = tensor_1.view(2, 3, 4)
print(f'4. Тензор размерностью 2x3x4:\n{tensor_2_3_4}')

# Тензор размерностью 2x2x2x3
tensor_2_2_2_3 = tensor_1.view(2, 2, 2, 3)
print(f'5. Тензор размерностью 2x2x2x3:\n{tensor_2_2_2_3}')
